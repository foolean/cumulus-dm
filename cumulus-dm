#!/usr/bin/env python3
#
# FILENAME:     cumulus-dm - Cumulus "download manager"
# AUTHOR:       Bennett Samowich <bennett@foolean.org>
# DATE:         2019-01-07
#
# DESCRIPTION:
#   Cumulus "download manager" is a tool that can be used to automate the
#   downloading of Cumulus OS images.  The primary use is to keep a local
#   PXE server up to date with the latest image.
#
#   Note:
#   This tool requires Cumulus credentials, which can be obtained by
#   completing the form at https://cumulusnetworks.com/accounts/signup/
#
###############################################################################
#
# Copyright 2019 Bennett Samowich <bennett@foolean.org>
#
# cumulus-dm is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cumulus-dm is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cumulus-dm.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

# Import standard libraries
import argparse
import configparser
import hashlib
import json
import os
import platform
import signal
import sys
import syslog
import urllib

# Import third-party libraries
import requests
from bs4           import BeautifulSoup
from pkg_resources import parse_version

# Our version
VERSION = '1.0.0'

# Default configuration file
DEFAULT_CONFIG_FILE = 'cumulus-dm.conf'

# Default User-Agent
DEFAULT_USER_AGENT = 'cumulus-dm/%s (%s) python/%s' % (VERSION, platform.platform(), platform.python_version())

# Lockfile for preventing parallel instantiations
LOCKFILE = '/var/lock/cumulus-dm.lock'

# Placeholders for command-line and configuration file options
OPTIONS = {}
CONFIG = {}

# download_cumulus_image
#   Download the Cumulus image file
#
#   Arguments:
#       image_json: JSON data for the image to be downloaded
#       jar:        authentication cookie jar
def download_cumulus_image(image_json, jar):

    # Assemble the URL used to get the actual image download url
    url = 'https://cumulusnetworks.com' + image_json['download_url']
    debug('interim_url:    "' + url + '"')

    # Assemble the headers
    headers = {
        'accept': 'application/json, text/javascript, */*; q=0.01',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US, en;q=0.5',
        'cache-control': 'no-cache',
        'connection': 'keepalive',
        'dnt': '1',
        'host': 'cumulusnetworks.com',
        'pragma': 'no-cache',
        'referer': 'https://cumulusnetworks.com/downloads/',
        'user-agent': CONFIG['user_agent'],
        'x-requested-with': 'XMLHttpRequest',
    }

    # Get the download URL from the interim URL
    response = requests.get(url, headers=headers, cookies=jar)
    soup = BeautifulSoup(response.text, 'html.parser')
    for item in soup.text.split("\n"):
        if "downloadUrl = " in item:
            download_url = 'https://cumulusnetworks.com' + item.split('"')[1]
            debug('download_url:   "' + download_url + '"')

    # Get the actual image URL from the download_url's redirect
    response = requests.get(download_url, headers=headers, cookies=jar, allow_redirects=False)
    image_url = response.headers['location']
    debug('image_url:      "' + image_url + '"')

    # Extract the name of the image file from the URL
    file_name = os.path.basename(urllib.parse.urlparse(image_url)[2])
    if CONFIG['destination'] is not None:
        file_name = os.path.join(CONFIG['destination'], file_name)
    debug('file_name:      "' + file_name + '"')

    # See if the file already exists
    file_exists = False
    if os.path.isfile(file_name):
        if verify_image_file(file_name, image_json):
            notice(file_name + ' already exists, skipping')
            file_exists = True
        else:
            notice(file_name + ' exists but has bad checksum, re-downloading')

    if not file_exists:
        # Get the file's size
        response = requests.get(image_url, stream=True)
        file_size = int(response.headers['content-length'])
        debug('file_size:      "%i"' % (file_size))

        # Open the destination file
        try:
            handle = open(file_name, 'wb')
        except OSError as err:
            fatal('unable to open "%s": %s' % (file_name, err))

        # Download the image file
        file_size_dl = 0
        print("Downloading: %s Bytes: %s ..." % (file_name, file_size), end="")
        for chunk in response.iter_content(chunk_size=8192):
            if chunk:
                file_size_dl += len(chunk)
                try:
                    handle.write(chunk)
                    pct = (file_size_dl / file_size) * 100
                    status = r"%10d [%6.2f%%]" % (file_size_dl, pct)
                    status = status + chr(8)*(len(status))
                    print(status, end="")
                except OSError as err:
                    print()
                    fatal('unable to write to "%s": %s' % (file_name, err))

        handle.close()
        print()

        # Verify the file's checksum
        if verify_image_file(file_name, image_json):
            notice('valid checksum for %s' % (file_name))
        else:
            error('invalid checksum for %s' % (file_name))


# verify_image_file
#   Verify a Cumulus image file against it's cryptographic hash
#
#   Arguments:
#       filename:   full path to the file to be verified
#       image_json: JSON data containing the checksum type and value
def verify_image_file(filename, image_json):
    checksum = get_file_checksum(filename, image_json['checksum_type']).lower()
    if checksum == image_json['checksum_value'].lower():
        return 1
    return 0


# get_cumulus_image_json
#   Get the JSON data for the available Cumulus images
#
#   Arguments:
#       jar:  authentication cookie jar
def get_cumulus_image_json(jar):
    # Assemble the headers to be used
    headers = {
        'accept': 'application/json, text/javascript, */*; q=0.01',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US, en;q=0.5',
        'cache-control': 'no-cache',
        'connection': 'keepalive',
        'dnt': '1',
        'host': 'cumulusnetworks.com',
        'pragma': 'no-cache',
        'referer': 'https://cumulusnetworks.com/downloads/',
        'user-agent': CONFIG['user_agent'],
        'x-requested-with': 'XMLHttpRequest',
    }

    # Assemble the API url
    api_url = 'https://cumulusnetworks.com/downloads/api/v1/downloads/?format=json'
    if 'product' in CONFIG:
        api_url = api_url + '&product=' + CONFIG['product']
    else:
        api_url = api_url + '&product=Cumulus Linux'
    if 'cpu' in CONFIG:
        api_url = api_url + '&cpu=' + CONFIG['cpu']
    if 'version' in CONFIG:
        api_url = api_url + '&version=' + CONFIG['version']
    if 'soc' in CONFIG:
        api_url = api_url + '&soc=' + CONFIG['soc']

    # Get the JSON data for the Cumulus images
    response = requests.get(api_url, headers=headers, cookies=jar)

    # Return the JSON data
    return json.loads(response.text)['results']


# get_cumulus_auth_cookie
#   Log into the Cumulus website and obtain the
#   authentication cookie.  This cookie will be
#   used for all subsequent communication.
def get_cumulus_auth_cookie():

    # Assemble the headers
    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.0;*/*;q=0.8',
        'accept-encoding': 'gzip, deflate, br',
        'accept-language': 'en-US, en;q=0.5',
        'cache-control': 'no-cache',
        'connection': 'keepalive',
        'dnt': '1',
        'host': 'cumulusnetworks.com',
        'pragma': 'no-cache',
        'referer': 'https://cumulusnetworks.com/accounts/login/?next=/downloads/',
        'user-agent': CONFIG['user_agent'],
    }

    # Get the intial login form
    response = requests.get('https://cumulusnetworks.com/accounts/login/?next=/downloads/', headers=headers)

    # Get the cookies from the response
    jar = response.cookies

    # Extract the CSRF middleware token
    soup = BeautifulSoup(response.text, 'html.parser')
    form = soup.find('form')
    token = form.find('input', {'name':'csrfmiddlewaretoken'})['value']

    # Assemble the URL to post our credentials to
    login_url = 'https://cumulusnetworks.com' + form.get('action')

    # Assemble the form data to be submitted
    form_data = {
        'csrfmiddlewaretoken': token,
        'next': '/downloads/',
        'login': CONFIG['login'],
        'password': CONFIG['password'],
    }

    # Submit the login form
    req = requests.Request('POST', login_url, headers=headers, data=form_data, cookies=jar).prepare()
    ses = requests.Session()

    # .. and get the resulting authentication cookie
    response = ses.send(req)
    if 'sessionid' not in ses.cookies:
        fatal('Unable to authenticate to "%s" as "%s"' % (login_url, CONFIG['login']))

    # Add the dbpinned and sessionid cookies to the jar
    jar.set('dbpinned', ses.cookies['dbpinned'], domain='cumulusnetworks.com', path='/')
    jar.set('sessionid', ses.cookies['sessionid'], domain='cumulusnetworks.com', path='/')

    # Return the authentication cookie
    return jar


# get_file_checksum
#    Compute the checksum hash of a file
#
#    Arguments:
#        filename:  full path to the file to be checksumed
#        algorithm: checksum algorithm to use (e.g. sha256)
def get_file_checksum(filename, algorithm):

    # Create the desired hash object
    if algorithm not in hashlib.algorithms_available:
        error('unknown algorithm "' + algorithm + '"')
        return None
    checksum = hashlib.new(algorithm)

    # Create the hash f the file
    with open(filename, "rb") as handle:
        for blocks in iter(lambda: handle.read(4096), b""):
            checksum.update(blocks)
        handle.close()

    # Return the hex checksum
    return checksum.hexdigest().lower()


# debug
#   Helper function to log/print debugging messages
#
#   Arguments:
#       string: string to be logged and printed
def debug(string):
    if CONFIG['debug'] is True:
        logprint("debug: %s" % (string))


# error
#   Helper function to log/print non-fatal error messages
#
#   Arguments:
#       string: string to be logged and printed
def error(string):
    logprint("error: %s" % (string))


# fatal
#   Helper function to log/print fatal error messages and exit
#
#   Arguments:
#       string: string to be logged and printed
def fatal(string):
    logprint("fatal: %s" % (string))
    sys.exit(1)


# notice
#   Helper function to log/print general notice messages
#
#   Arguments:
#       string: string to be logged and printed
def notice(string):
    if CONFIG['quiet'] is False:
        logprint("notice: %s" % (string))


# warning
#   Helper function to log/print warning messages
#
#   Arguments:
#       string: string to be logged and printed
def warning(string):
    logprint("warning: %s" % (string))


# logprint
#   Helper function to log and print messages.  Generally
#   this will be called by the functions debug, error, fatal,
#   notice, and warning.
#
#   Arguments:
#       string: string to be logged and printed
def logprint(string):
    syslog.syslog(string)
    print(string)


# signal_handler
#   Helper function to catch SIGINT
def signal_handler(signalnum, frame):
    del frame
    notice('caught signal "%s"' % (signal.Signals(signalnum).name))
    clean_exit()

# clean_exit
#   Helper function to clean up and exit gracefully
def clean_exit():
    if os.path.exists(LOCKFILE):
        notice('cleaning up "%s"' % (LOCKFILE))
        os.remove(LOCKFILE)
    sys.exit(0)

# parse_options
#   Parse the command-line options and the configuration file
def parse_options():
    parser = argparse.ArgumentParser(description='Download Cumulus image files')
    parser.add_argument(
        '-a', '--user-agent',
        dest='user_agent',
        default=DEFAULT_USER_AGENT,
        help=argparse.SUPPRESS
    )

    parser.add_argument(
        '-c', '--cpu',
        dest='cpu',
        default=None,
        choices=['x86', 'PowerPC', 'ARM'],
        help='Filter image files by cpu type',
    )

    parser.add_argument(
        '-C', '--config',
        dest='config-file',
        default=None,
        help='Specify an alternate configuration file [default: %(default)s]'
    )

    parser.add_argument(
        '-d', '--destination',
        dest='destination',
        default=None,
        help='Destination directory to save image files to'
    )

    parser.add_argument(
        '-D', '--debug',
        dest='debug',
        action='store_true',
        default=False,
        help='Print extra debugging information (implies --verbose)'
    )

    parser.add_argument(
        '-p', '--product',
        dest='product',
        default=None,
        choices=['Cumulus Linux', 'NetQ Virtual', 'Cumulus VX'],
        help='Filter image files by product',
    )

    parser.add_argument(
        '-q', '--quiet',
        dest='quiet',
        action='store_true',
        default=False,
        help='Suppress output (negates --debug and --verbose)',
    )

    parser.add_argument(
        '-s', '--soc',
        dest='soc',
        default=None,
        choices=['Broadcom', 'Mellanox'],
        help='Filter image files by chipset',
    )

    parser.add_argument(
        '-v', '--product-version',
        dest='version',
        default=None,
        help='Filter image files by version number',
    )

	# Parse the options
    args = parser.parse_args()
    OPTIONS.update(vars(args))

    # --quiet negates --debug
    if OPTIONS['quiet'] is True:
        OPTIONS['debug'] = False
        OPTIONS['verbose'] = False

    # --debug implies --verbose
    if OPTIONS['debug'] is True:
        OPTIONS['verbose'] = True

    # Determine where the configuration file is
    if OPTIONS['config-file'] is None:
        if os.path.isfile('/etc/' + DEFAULT_CONFIG_FILE):
            OPTIONS['config-file'] = '/etc/' + DEFAULT_CONFIG_FILE
        elif os.path.isfile('/usr/local/etc/' + DEFAULT_CONFIG_FILE):
            OPTIONS['config-file'] = '/usr/local/etc/' + DEFAULT_CONFIG_FILE
        else:
            fatal('no configuration file found')


# load_configuration_file
#   Load options from the configuration file
def load_configuration_file():
    # Read and parse the configuration file
    # configparser expects an INI file so we'll prepend '[DEFAULT]'
    # in order to convince configparser that everything is OK.
    config = configparser.ConfigParser(interpolation=None)
    try:
        with open(OPTIONS['config-file']) as handle:
            config.read_string("[DEFAULT]\n" + handle.read())
            handle.close()
    except OSError as err:
        fatal("unable to open '%s': %s" % (OPTIONS['config-file'], err))
        sys.exit(1) # should never get here

    # Convert the config object into a dictionary
    for (var, val) in config.items('DEFAULT'):
        CONFIG[var] = val

    # Override the configuration options on the command-line
    for key in OPTIONS:
        if OPTIONS[key] is not None:
            CONFIG[key] = OPTIONS[key]

    # Make sure the destination directory exists
    if 'destination' in CONFIG:
        if not os.path.isdir(CONFIG['destination']):
            fatal('destination directory "%s" does not exist' % (CONFIG['destination']))
    else:
        fatal('no destination directory specified')

    # Make sure the minimum version exists
    if 'min_version' not in CONFIG:
        CONFIG['min_version'] = '0'


# main
#   Primary application processing
def main():
    signal.signal(signal.SIGINT, signal_handler)
    syslog.openlog(os.path.basename(sys.argv[0]), logoption=syslog.LOG_PID)

    # Load our configuration options and command-line arguments
    parse_options()
    load_configuration_file()

    # Get the authentication cookie
    cookie_jar = get_cumulus_auth_cookie()

    # Get the JSON data for the Cumulus images
    images_json = get_cumulus_image_json(cookie_jar)

    # Download the cumulus image
    for image_json in images_json:
        if parse_version(image_json['version']) >= parse_version(CONFIG['min_version']):
            download_cumulus_image(image_json, cookie_jar)
        else:
            debug('version "%s" outside of requested range, skipping' % (image_json['version']))


if __name__ == '__main__':
    try:
        main()
    finally:
        clean_exit()
